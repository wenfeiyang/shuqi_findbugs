<?xml version="1.0" encoding="UTF-8"?>

<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="messagecollection.xsd">

  <!--
  **********************************************************************
  Plugin information
  **********************************************************************
  -->
  <Plugin>
    <ShortDescription>Shuqi Specific Findbugs plugin</ShortDescription>
    <Details>
<![CDATA[
<p>
This plugin contains all of the specific FindBugs detectors for shuqi project.
</p>
]]>
    </Details>
  </Plugin>

  
   <Detector class="com.shuqi.findbugs.BitmapMisuse">
    <Details>
<![CDATA[
<p> This detector finds misuses of Bitmap which may potentially lead to OOM Error.
<p> Refer to <a href='https://developer.android.com/training/displaying-bitmaps/index.html'>Displaying Bitmaps Efficiently</a>
]]>
    </Details>
  </Detector>
  
    <Detector class="com.shuqi.findbugs.StaticReferResource">
    <Details>
<![CDATA[
<p> This detector finds static references of Object holding memory-consumption resources that cause GC never work
]]>
    </Details>
  </Detector>
  
    <Detector class="com.shuqi.findbugs.MissingUnregistation">
    <Details>
<![CDATA[
<p> This detector detects if 'Context.unregisterReceiver' is missing in case of 'Context.registerReceiver' called
]]>
    </Details>
  </Detector>

    <Detector class="com.shuqi.findbugs.UseAdapterConvertView">
    <Details>
<![CDATA[
<p> This detector finds classes extended from BaseAdapter that don't try to use 'convertView' by detecting if 'convertView' is null in overrided 'getView' method 
]]>
    </Details>
  </Detector>
  
  <Detector class="com.shuqi.findbugs.FindOpenDatasource">
    <Details>
<![CDATA[
<p> This detector looks for Android database or Bitmap objects which do not escape the
method and do not appear to be closed/recycled on all paths out of the method.
It is a slow detector.</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="com.shuqi.findbugs.ContextMisuse">
    <Details>
<![CDATA[
<p> This detector looks for misuse of Application context and Activity context
It is a slow detector.</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="com.shuqi.findbugs.DialogDismiss">
    <Details>
<![CDATA[
<p> This detector looks for Dialog instances whose 'show()' is called somewhere, but missing 'cancel()' or 'dismiss()' in the code
It is a fast detector.</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="com.shuqi.findbugs.InnerClassMisuse">
    <Details>
<![CDATA[
<p> This detector looks for non-static or anonmyous inner classes in Activity, View, Dialog or Toast. 
Each instance of a nonstatic inner class will have an extraneous reference to its outer Activity instance. 
Storing this reference may result in the Activity being retained indirectly when it would otherwise be eligible for garbage collection
It is a fast detector.</p>
]]>
    </Details>
  </Detector>
  
  <Detector class="com.shuqi.findbugs.NamingConvention">
    <Details>
<![CDATA[
<p> This detector looks for classes not following the naming rules of Activity, Service, Dialog, etc
It is a slow detector.</p>
]]>
    </Details>
  </Detector>
  
  <BugPattern type="OOM_BITMAP_NO_SAMPLING">
    <ShortDescription>Bitmap no sampling source data</ShortDescription>
    <LongDescription>'BitmapFactory.decodeResource' or 'BitmapFactory.decodeFile' loads picture directly without setting 'inSampleSize' option</LongDescription>
    <Details>
<![CDATA[
<p> Bitmap creation via 'BitmapFactory.decodeResource' or 'BitmapFactory.decodeFile' doesn't set 'inSampleSize' option
<p> For details, refer to <a href='https://developer.android.com/training/displaying-bitmaps/load-bitmap.html'>Loading Large Bitmaps Efficiently</a>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="OOM_BITMAP_NO_EXPLICIT_RECYCLE">
    <ShortDescription>No explicit call of recycle() on Bitmap object</ShortDescription>
    <LongDescription>No explicit call of recycle() on Bitmap object</LongDescription>
    <Details>
<![CDATA[
<p> Bitmap Object doesn't call recycle() explicitly
<p> On Android 2.3.3 (API level 10) and lower, the backing pixel data for a bitmap is stored in native memory. It is separate from the bitmap itself, which is stored in the Dalvik heap. The pixel data in native memory is not released in a predictable manner, potentially causing an application to briefly exceed its memory limits and crash
<p> For details, refer to <a href='https://developer.android.com/training/displaying-bitmaps/manage-memory.html'>Loading Large Bitmaps Efficiently</a>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="OOM_STATIC_REFER_RESOURCE">
    <ShortDescription>Static references of memory-consumption Objects</ShortDescription>
    <LongDescription>{2} has static reference to memory-consumption Objects</LongDescription>
    <Details>
<![CDATA[
<p> Static references of Object might hold memory-consumption resources, should try to avoid direct or indirect static referrence of  "android.app.Activity", "android.graphics.Bitmap", "android.graphics.drawable"
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="OOM_MISSING_UNREGISTATION">
    <ShortDescription>Missing Context.unregisterReceiver</ShortDescription>
    <LongDescription>'Context.unregisterReceiver' should be called before the ending of android component's lifecycle</LongDescription>
    <Details>
<![CDATA[
'Context.registerReceiver' is called, but missing 'Context.unregisterReceiver'. it should be called before the ending of android component's lifecycle to avoid memory leak due to android system continue to hold the referrence
]]>
    </Details>
  </BugPattern>

    <BugPattern type="OOM_NOT_USE_CONVERTVIEW">
    <ShortDescription>Not using 'convertView' in BaseAdapter</ShortDescription>
    <LongDescription>'convertView' should be used in first priority in method 'getView' of BaseAdapter</LongDescription>
    <Details>
<![CDATA[
'convertView' should be used in first priority in method 'getView' of BaseAdapter
]]>
    </Details>
  </BugPattern>
  
    <BugPattern type="OOM_OPEN_DATABASE_RESOURCE">
    <ShortDescription>Method may fail to close database resource</ShortDescription>
    <LongDescription>{1} may fail to close {2.excludingPackage}</LongDescription>
    <Details>
<![CDATA[
<p> The method creates a database resource (such as a database connection
or row set), does not assign it to any
fields, pass it to other methods, or return it, and does not appear to close
the object on all paths out of the method.&nbsp; Failure to
close database resources on all paths out of a method may
result in poor performance, and could cause the application to
have problems communicating with the database.
</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="OOM_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH">
    <ShortDescription>Method may fail to close database resource on exception</ShortDescription>
    <LongDescription>{1} may fail to close database resource on exception</LongDescription>
    <Details>
<![CDATA[
<p> The method creates a database resource (such as a database connection
or row set), does not assign it to any
fields, pass it to other methods, or return it, and does not appear to close
the object on all exception paths out of the method.&nbsp; Failure to
close database resources on all paths out of a method may
result in poor performance, and could cause the application to
have problems communicating with the database.</p>
]]>
    </Details>
  </BugPattern>

  <BugPattern type="OOM_UNCYCLE_LOCAL_BITMAP">
    <ShortDescription>Method may fail to recycle Bitmap Object</ShortDescription>
    <LongDescription>{1} may fail to recycle {2.excludingPackage}</LongDescription>
    <Details>
<![CDATA[
<p> The method creates a Bitmap resource, does not assign it to any
fields, pass it to other methods, or return it, and does not appear to recycle
the object on all exception paths out of the method.&nbsp; Failure to
recycle Bitmap object on all paths out of a method may
result in poor performance, and could cause the application to
have problems communicating with the database.</p>
]]>
    </Details>
  </BugPattern>

    <BugPattern type="OOM_UNCYCLE_LOCAL_BITMAP_EXCEPTION_PATH">
    <ShortDescription>Method may fail to recycle Bitmap Object</ShortDescription>
    <LongDescription>{1} may fail to recycle Bitmap Object on exception</LongDescription>
    <Details>
<![CDATA[
<p> The method creates a Bitmap resource, does not assign it to any
fields, pass it to other methods, or return it, and does not appear to recycle
the object on all exception paths out of the method.&nbsp; Failure to
recycle Bitmap object on all paths out of a method may
result in poor performance, and could cause the application to
have problems communicating with the database.</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="OOM_MISUSE_APPLICATION_CONTEXT">
    <ShortDescription>Should use application context?</ShortDescription>
    <LongDescription>{1} could use application context?</LongDescription>
    <Details>
<![CDATA[
Should use application context as much as possible.
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="OOM_MISUSE_ACTIVITY_CONTEXT">
    <ShortDescription>Should use activity context for dialog?</ShortDescription>
    <LongDescription>{1} might not use activity context</LongDescription>
    <Details>
<![CDATA[
Dialog should use activity context.
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="OOM_DIALOG_MISSING_DISMISS_OR_CANCEL">
    <ShortDescription>Showed Dialog Should call cancel() or dismiss() somewhere</ShortDescription>
    <LongDescription>Showed Dialog Should call cancel() or dismiss() somewhere</LongDescription>
    <Details>
<![CDATA[
Showed Dialog Should call cancel() or dismiss() somewhere.
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="NM_ACTIVITY_CLASS_NAMING">
    <ShortDescription>Activity subclass's name should end with 'Activity'</ShortDescription>
    <LongDescription>Activity subclass's name should end with 'Activity'</LongDescription>
    <Details>
<![CDATA[
Activity subclass's name should end with 'Activity'
]]>
    </Details>
  </BugPattern>
  
   <BugPattern type="NM_SERVICE_CLASS_NAMING">
    <ShortDescription>Service subclass's name should end with 'Service'</ShortDescription>
    <LongDescription>Service subclass's name should end with 'Service'</LongDescription>
    <Details>
<![CDATA[
Service subclass's name should end with 'Service'
]]>
    </Details>
  </BugPattern>
  
   <BugPattern type="NM_BROADCASTRECEIVER_CLASS_NAMING">
    <ShortDescription>BroadcastReceiver subclass's name should end with 'BroadcastReceiver'</ShortDescription>
    <LongDescription>BroadcastReceiver subclass's name should end with 'BroadcastReceiver'</LongDescription>
    <Details>
<![CDATA[
BroadcastReceiver subclass's name should end with 'BroadcastReceiver'
]]>
    </Details>
  </BugPattern>
  
   <BugPattern type="NM_CONTENTPROVIDER_CLASS_NAMING">
    <ShortDescription>ContentProvider subclass's name should end with 'ContentProvider'</ShortDescription>
    <LongDescription>ContentProvider subclass's name should end with 'ContentProvider'</LongDescription>
    <Details>
<![CDATA[
ContentProvider subclass's name should end with 'ContentProvider'
]]>
    </Details>
  </BugPattern>
  
   <BugPattern type="NM_DIALOG_CLASS_NAMING">
    <ShortDescription>Dialog subclass's name should end with 'Dialog'</ShortDescription>
    <LongDescription>Dialog subclass's name should end with 'Dialog'</LongDescription>
    <Details>
<![CDATA[
Dialog subclass's name should end with 'Dialog'
]]>
    </Details>
  </BugPattern>
  
   <BugPattern type="NM_TOAST_CLASS_NAMING">
    <ShortDescription>Toast subclass's name should end with 'Toast'</ShortDescription>
    <LongDescription>Toast subclass's name should end with 'Toast'</LongDescription>
    <Details>
<![CDATA[
Toast subclass's name should end with 'Toast'
]]>
    </Details>
  </BugPattern>
  
   <BugPattern type="NM_VIEW_CLASS_NAMING">
    <ShortDescription>Customized View class's name should end with 'View'</ShortDescription>
    <LongDescription>Customized View class's name should end with 'View'</LongDescription>
    <Details>
<![CDATA[
Customized View class's name should end with 'View'
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="OOM_NON_STATIC_INNER_CLASS_IN_ACTIVITY">
    <ShortDescription>Could be a static inner class</ShortDescription>
    <LongDescription>Should {0} be a _static_ inner class in Activiy?</LongDescription>
    <Details>
<![CDATA[
 In Java, non-static inner classes hold an implicit reference to their enclosing class. 
 If you're not careful, storing this reference can result in the Activity being retained 
 when it would otherwise be eligible for garbage collection. 
 Activity objects hold a reference to their entire view hierarchy and all its resources, 
 so if you leak one, you leak a lot of memory.
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="OOM_ANONYMOUS_INNER_CLASS_IN_ACTIVITY">
    <ShortDescription>Could be a static inner class in Activity</ShortDescription>
    <LongDescription>Should {0} be a _static_ inner class in Activiy?</LongDescription>
    <Details>
<![CDATA[
 In Java, anonmyous inner classes hold an implicit reference to their enclosing class. 
 If you're not careful, storing this reference can result in the Activity being retained 
 when it would otherwise be eligible for garbage collection. 
 Activity objects hold a reference to their entire view hierarchy and all its resources, 
 so if you leak one, you leak a lot of memory.
]]>
    </Details>
  </BugPattern>
  

    <BugPattern type="OOM_NON_STATIC_INNER_CLASS_IN_VIEW">
    <ShortDescription>Could be a static inner class in Customized View?</ShortDescription>
    <LongDescription>Should {0} be a _static_ inner class in Customized View?</LongDescription>
    <Details>
<![CDATA[
 In Java, non-static inner classes hold an implicit reference to their enclosing class. 
 If you're not careful, storing this reference can result in the Activity being retained 
 when it would otherwise be eligible for garbage collection. 
 Activity objects hold a reference to their entire view hierarchy and all its resources, 
 so if you leak one, you leak a lot of memory.
]]>
    </Details>
  </BugPattern>
  
    <BugPattern type="OOM_ANONYMOUS_INNER_CLASS_IN_VIEW">
    <ShortDescription>Could be a static inner class in Customized View</ShortDescription>
    <LongDescription>Should {0} be a _static_ inner class in Customized View?</LongDescription>
    <Details>
<![CDATA[
 In Java, anonmyous inner classes hold an implicit reference to their enclosing class. 
 If you're not careful, storing this reference can result in the Activity being retained 
 when it would otherwise be eligible for garbage collection. 
 Activity objects hold a reference to their entire view hierarchy and all its resources, 
 so if you leak one, you leak a lot of memory.
]]>
    </Details>
  </BugPattern>
  
    <BugPattern type="OOM_NON_STATIC_INNER_CLASS_IN_DIALOG">
    <ShortDescription>Could be static inner class in Dialog</ShortDescription>
    <LongDescription>Should {0} be a _static_ inner class in Dialog?</LongDescription>
    <Details>
<![CDATA[
 In Java, non-static inner classes hold an implicit reference to their enclosing class. 
 If you're not careful, storing this reference can result in the Activity being retained 
 when it would otherwise be eligible for garbage collection. 
 Activity objects hold a reference to their entire view hierarchy and all its resources, 
 so if you leak one, you leak a lot of memory.
]]>
    </Details>
  </BugPattern>
  
    <BugPattern type="OOM_ANONYMOUS_INNER_CLASS_IN_DIALOG">
    <ShortDescription>Could be static inner class in Dialog</ShortDescription>
    <LongDescription>Should {0} be a _static_ inner class in Dialog?</LongDescription>
    <Details>
<![CDATA[
 In Java, anonmyous inner classes hold an implicit reference to their enclosing class. 
 If you're not careful, storing this reference can result in the Activity being retained 
 when it would otherwise be eligible for garbage collection. 
 Activity objects hold a reference to their entire view hierarchy and all its resources, 
 so if you leak one, you leak a lot of memory.
]]>
    </Details>
  </BugPattern>
  
    <BugPattern type="OOM_NON_STATIC_INNER_CLASS_IN_TOAST">
    <ShortDescription>Could be static inner class in Toast</ShortDescription>
    <LongDescription>Should {0} be a _static_ inner class in Toast?</LongDescription>
    <Details>
<![CDATA[
 In Java, non-static inner classes hold an implicit reference to their enclosing class. 
 If you're not careful, storing this reference can result in the Activity being retained 
 when it would otherwise be eligible for garbage collection. 
 Activity objects hold a reference to their entire view hierarchy and all its resources, 
 so if you leak one, you leak a lot of memory.
]]>
    </Details>
  </BugPattern>
  
    <BugPattern type="OOM_ANONYMOUS_INNER_CLASS_IN_TOAST">
    <ShortDescription>Could be static inner class in Toast</ShortDescription>
    <LongDescription>Should {0} be a _static_ inner class in Toast?</LongDescription>
    <Details>
<![CDATA[
 In Java, anonmyous inner classes hold an implicit reference to their enclosing class. 
 If you're not careful, storing this reference can result in the Activity being retained 
 when it would otherwise be eligible for garbage collection. 
 Activity objects hold a reference to their entire view hierarchy and all its resources, 
 so if you leak one, you leak a lot of memory.
]]>
    </Details>
  </BugPattern>
  
    <BugPattern type="OOM_NON_STATIC_INNER_HANDLER">
    <ShortDescription>Handler reference leaks</ShortDescription>
    <LongDescription>Should {0} be a _static_ Handler class?</LongDescription>
    <Details>
<![CDATA[
Since this Handler is declared as an non-static inner class, it may prevent the outer
class from being garbage collected. If the Handler is using a Looper or
MessageQueue for a thread other than the main thread, then there is no issue.
If the Handler is using the Looper or MessageQueue of the main thread, you
need to fix your Handler declaration, as follows: Declare the Handler as a
static class; In the outer class, instantiate a WeakReference to the outer
class and pass this object to your Handler when you instantiate the Handler;
Make all references to members of the outer class using the WeakReference
object.
]]>
    </Details>
  </BugPattern>
  
    <BugPattern type="OOM_ANONYMOUS_INNER_HANDLER">
    <ShortDescription>Handler reference leaks</ShortDescription>
    <LongDescription>Should {0} be a _static_ Handler class?</LongDescription>
    <Details>
<![CDATA[
Since this Handler is declared as an anonymous inner class, it may prevent the outer
class from being garbage collected. If the Handler is using a Looper or
MessageQueue for a thread other than the main thread, then there is no issue.
If the Handler is using the Looper or MessageQueue of the main thread, you
need to fix your Handler declaration, as follows: Declare the Handler as a
static class; In the outer class, instantiate a WeakReference to the outer
class and pass this object to your Handler when you instantiate the Handler;
Make all references to members of the outer class using the WeakReference
object.
]]>
    </Details>
  </BugPattern>
  
  <BugCode abbrev="OOM">Found OOM issues</BugCode>
</MessageCollection>

